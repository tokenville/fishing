"""
Message templates and text generators for the fishing bot.
Contains all static messages, dynamic text generation functions, and story templates.
"""

def escape_markdown(text):
    """Simply return text without escaping - we'll use plain text mode"""
    return text if text else ""

def get_cast_header(username, rod_name, pond_name, pond_pair, entry_price, leverage):
    """Fixed casting header with key information"""
    safe_username = username if username else "–†—ã–±–∞–∫"
    
    return (
        f"üé£ <b>{safe_username}</b> –∑–∞–±—Ä–∞—Å—ã–≤–∞–µ—Ç —É–¥–æ—á–∫—É:\n\n"
        f"–£–¥–æ—á–∫–∞: <b>{rod_name}</b>\n"
        f"–í–æ–¥–æ–µ–º: <b>{pond_name}</b> ({pond_pair})\n"
        f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: <b>${entry_price:.2f}</b>\n"
        f"–ü–ª–µ—á–æ: <b>{leverage}x</b>"
    )

def get_cast_animated_sequence():
    """Animated sequence for casting (only this part changes)"""
    return [
        "üí´ –í–∑–º–∞—Ö! –£–¥–æ—á–∫–∞ –ª–µ—Ç–∏—Ç —á–µ—Ä–µ–∑ –≤–æ–∑–¥—É—Ö!",
        "üí¶ –ü–õ–Æ–•! –ò–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ!",
        "ü™± –ù–∞–∂–∏–≤–∫–∞ –º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–≥—Ä—É–∂–∞–µ—Ç—Å—è...",
        "üêü –†—ã–±–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –Ω–∞–∂–∏–≤–∫–æ–π!",
        "‚ú® –ü–æ–¥—Å–µ–∫–∞–π —Å /hook, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤..."
    ]

def format_cast_message(header, animated_text):
    """Combine header and animated text for casting message"""
    return f"{header}\n\n{animated_text}"


        
def get_hook_header(username, rod_name, pond_name, pond_pair, time_fishing, entry_price, current_price, leverage):
    """Fixed hook header with key information"""
    safe_username = username if username else "–†—ã–±–∞–∫"
    
    return (
        f"üé£ <b>{safe_username} –ü–û–î–°–ï–ö–ê–ï–¢!</b>\n\n"
        f"–£–¥–æ—á–∫–∞: <b>{rod_name}</b>\n"
        f"–í–æ–¥–æ–µ–º: <b>{pond_name}</b> ({pond_pair})\n"
        f"‚è± –í—Ä–µ–º—è —Ä—ã–±–∞–ª–∫–∏: <b>{time_fishing}</b>\n"
        f"üí∞ –ü–æ–∑–∏—Ü–∏—è: ${entry_price:.2f} ‚Üí <b>${current_price:.2f}</b>\n"
        f"–ü–ª–µ—á–æ: <b>{leverage}x</b>"
    )

def get_hook_animated_sequence():
    """Animated sequence for hooking (only this part changes)"""
    return [
        "‚ö° –ü–æ–¥—Å–µ–∫–∞–µ–º! –ß—Ç–æ-—Ç–æ –Ω–∞ –∫—Ä—é—á–∫–µ!",
        "üé£ –ë–æ—Ä—å–±–∞ –Ω–∞—á–∞–ª–∞—Å—å! –¢—è–Ω–µ–º –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ...",
        "üåä –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ! –†—ã–±–∞ –Ω–µ —Ö–æ—á–µ—Ç —Å–¥–∞–≤–∞—Ç—å—Å—è!",
        "üí´ –ü–æ—á—Ç–∏ –≤—ã—Ç–∞—â–∏–ª–∏... –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É—Å–∏–ª–∏–µ!",
        "üêü –ß—Ç–æ-—Ç–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –∏–∑ –≥–ª—É–±–∏–Ω!"
    ]

def format_hook_message(header, animated_text):
    """Combine header and animated text for hook message"""
    return f"{header}\n\n{animated_text}"

def get_hook_tension_message(pnl):
    """Get tension-building message before revealing catch"""
    if pnl > 20:
        return "üé£ –≠–ü–ò–ß–ï–°–ö–ê–Ø –ë–ò–¢–í–ê! –í—Å—è –ª–µ—Å–∫–∞ —Ç—Ä—è—Å–µ—Ç—Å—è! –≠—Ç–æ —á—Ç–æ-—Ç–æ –û–ì–†–û–ú–ù–û–ï! üåäüí•"
    elif pnl > 10:
        return "üê† –°–∏–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ! –≠—Ç–∞ —Ä—ã–±–∞ –±–æ—Ä–µ—Ç—Å—è! ‚ö°"
    elif pnl > 0:
        return "üêü –ß—Ç–æ-—Ç–æ –ø—Ä–∏–ª–∏—á–Ω–æ–µ –Ω–∞ –∫—Ä—é—á–∫–µ... –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø–æ–π–º–∞–ª–∏! ü§î"
    elif pnl > -10:
        return "üåä –û—â—É—â–∞–µ—Ç—Å—è –ª–µ–≥–∫–æ... –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –≤–æ–¥–æ—Ä–æ—Å–ª–∏? üòÖ"
    else:
        return "ü¶ê –û –Ω–µ—Ç... —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º—É—Å–æ—Ä... üò¨"

def get_catch_story_from_db(fish_data, pnl, time_fishing):
    """Get dramatic catch reveal story from database fish data"""
    if not fish_data:
        return f"üé£ –í—ã —á—Ç–æ-—Ç–æ –ø–æ–π–º–∞–ª–∏!\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {pnl:+.1f}% –∑–∞ {time_fishing}"
    
    # Handle both old (12 fields) and new (13 fields with ai_prompt) formats
    if len(fish_data) == 12:
        _, fish_name, emoji, _, _, _, _, _, _, _, story_template, _ = fish_data
    elif len(fish_data) == 13:  # 13 fields with ai_prompt at the end (after created_at)
        _, fish_name, emoji, _, _, _, _, _, _, _, story_template, _, _ = fish_data
    else:
        # Safe fallback for unexpected formats
        fish_name = fish_data[1] if len(fish_data) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä—ã–±–∞"
        emoji = fish_data[2] if len(fish_data) > 2 else "üêü"
        story_template = fish_data[10] if len(fish_data) > 10 else None
    
    # Use story template from database
    if story_template:
        story = story_template.format(
            emoji=emoji,
            name=fish_name,
            pnl=pnl,
            time_fishing=time_fishing
        )
        return f"{story} ({pnl:+.1f}% –∑–∞ {time_fishing})"
    
    # Fallback to simple story
    return f"üé£ –í—ã –ø–æ–π–º–∞–ª–∏ {emoji} {fish_name}!\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {pnl:+.1f}% –∑–∞ {time_fishing}"


def get_help_text():
    """Get dynamic help command text from database"""
    from src.database.db_manager import DATABASE_PATH
    import sqlite3
    
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # Get fish statistics
        cursor.execute('''
            SELECT emoji, name, rarity, description, min_pnl, max_pnl, required_ponds, required_rods
            FROM fish 
            ORDER BY min_pnl DESC
        ''')
        fish_data = cursor.fetchall()
        
        # Get ponds count and info
        cursor.execute('SELECT COUNT(*) FROM ponds WHERE is_active = 1')
        ponds_count = cursor.fetchone()[0]
        
        cursor.execute('''
            SELECT name, trading_pair, required_level 
            FROM ponds 
            WHERE is_active = 1 
            ORDER BY required_level
        ''')
        ponds_data = cursor.fetchall()
        
        # Get rods count and leverage range
        cursor.execute('SELECT COUNT(*) FROM rods')
        rods_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT MIN(leverage), MAX(leverage) FROM rods')
        leverage_range = cursor.fetchone()
        
        # Get starter bait amount (from user creation)
        cursor.execute('SELECT bait_tokens FROM users WHERE bait_tokens = 10 LIMIT 1')
        starter_bait = cursor.fetchone()
        starter_bait_amount = starter_bait[0] if starter_bait else 10
        
        conn.close()
        
        # Build dynamic help text
        help_text = """üé£ <b>–ö–û–ú–ê–ù–î–´ –ë–û–¢–ê –†–´–ë–ê–õ–ö–ò:</b>

/cast - –ó–∞–∫–∏–Ω—É—Ç—å —É–¥–æ—á–∫—É (—Å—Ç–æ–∏–º–æ—Å—Ç—å: 1 ü™± BAIT)
/hook - –í—ã—Ç–∞—â–∏—Ç—å —É–ª–æ–≤ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø–æ–π–º–∞–ª–∏!
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä—ã–±–∞–ª–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>üéÆ –ö–ê–ö –ò–ì–†–ê–¢–¨:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cast —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É
2. –ñ–¥–∏—Ç–µ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–±—Ä–æ—Å–∞
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hook –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
5. –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É —Ä—ã–±—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!

<b>üêü –¢–ò–ü–´ –†–´–ë:</b>"""
        
        # Group fish by rarity
        rarity_groups = {
            'trash': [],
            'common': [],
            'rare': [],
            'epic': [], 
            'legendary': []
        }
        
        special_fish = []
        
        for fish in fish_data:
            emoji, name, rarity, _, min_pnl, max_pnl, required_ponds, required_rods = fish
            
            # Check if it's a special fish (has requirements)
            if required_ponds or required_rods:
                special_fish.append(fish)
            else:
                # Regular fish grouped by rarity
                if rarity in rarity_groups:
                    rarity_groups[rarity].append(fish)
        
        # Add regular fish by rarity
        rarity_names = {
            'trash': '–ú—É—Å–æ—Ä',
            'common': '–û–±—ã—á–Ω–∞—è', 
            'rare': '–†–µ–¥–∫–∞—è',
            'epic': '–≠–ø–∏—á–µ—Å–∫–∞—è',
            'legendary': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è'
        }
        
        for rarity in ['legendary', 'epic', 'rare', 'common', 'trash']:
            for fish in rarity_groups[rarity]:
                emoji, name, _, _, min_pnl, max_pnl, _, _ = fish
                pnl_desc = f"({min_pnl:+.0f}% to {max_pnl:+.0f}%)" if min_pnl != max_pnl else f"({min_pnl:+.0f}%)"
                help_text += f"\n{emoji} {name} {pnl_desc} - {rarity_names[rarity]}"
        
        # Add special fish section if any exist
        if special_fish:
            help_text += "\n\n<b>üåü –û–°–û–ë–´–ï –†–´–ë–´:</b>"
            for fish in special_fish:
                emoji, name, rarity, _, min_pnl, max_pnl, required_ponds, required_rods = fish
                
                # Build requirement description
                requirements = []
                if required_ponds:
                    # Get pond names for requirements
                    pond_ids = required_ponds.split(',')
                    pond_names = []
                    for pond_data in ponds_data:
                        if str(ponds_data.index(pond_data) + 1) in pond_ids:
                            pond_names.append(pond_data[0])
                    if pond_names:
                        requirements.append(f"—Ç–æ–ª—å–∫–æ {'/'.join(pond_names)}")
                
                if required_rods:
                    requirements.append("—Ç–æ–ø–æ–≤—ã–µ —É–¥–æ—á–∫–∏")
                
                req_text = ", ".join(requirements) if requirements else "–æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è"
                help_text += f"\n{emoji} {name} - {req_text}"
        
        # Add dynamic system info
        help_text += f"\n\n<b>‚öôÔ∏è –°–ò–°–¢–ï–ú–ê:</b>"
        help_text += f"\n‚Ä¢ {rods_count} —Ç–∏–ø–æ–≤ —É–¥–æ—á–µ–∫ —Å –ø–ª–µ—á–æ–º {leverage_range[0]}x –¥–æ {leverage_range[1]}x"
        help_text += f"\n‚Ä¢ {ponds_count} —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–¥–æ–µ–º–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä–∞–º–∏:"
        
        for pond in ponds_data[:4]:  # Show first 4 ponds
            help_text += f"\n  ‚îî {pond[0]} ({pond[1]}) - —É—Ä–æ–≤–µ–Ω—å {pond[2]}+"
        
        if ponds_count > 4:
            help_text += f"\n  ‚îî ... –∏ –µ—â–µ {ponds_count - 4}"
            
        help_text += f"\n‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π"
        help_text += f"\n‚Ä¢ –ù–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç {starter_bait_amount} ü™± BAIT —Ç–æ–∫–µ–Ω–æ–≤"
        help_text += f"\n‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∏ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö!"
        
        return help_text
        
    except Exception:
        # Fallback to static text if database fails
        return """üé£ <b>–ö–û–ú–ê–ù–î–´ –ë–û–¢–ê –†–´–ë–ê–õ–ö–ò:</b>

/cast - –ó–∞–∫–∏–Ω—É—Ç—å —É–¥–æ—á–∫—É (—Å—Ç–æ–∏–º–æ—Å—Ç—å: 1 ü™± BAIT)
/hook - –í—ã—Ç–∞—â–∏—Ç—å —É–ª–æ–≤ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø–æ–π–º–∞–ª–∏!
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä—ã–±–∞–ª–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

<i>‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä—ã–±–∞–ª–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</i>
üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /cast —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"""


def format_fishing_complete_caption(catch_story, pnl_percent, entry_price, current_price, leverage):
    """Format fishing complete photo caption"""
    pnl_color = "üü¢" if pnl_percent >= 0 else "üî¥"
    return (
        f"üèÜ <b>–†–´–ë–ê–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b> üèÜ\n\n"
        f"{catch_story}\n\n"
        f"<b>–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
        f"{pnl_color} P&L: <b>{pnl_percent:+.1f}%</b> (–ø–ª–µ—á–æ {leverage}x)\n"
        f"üí∞ –¶–µ–Ω–∞: ${entry_price:.2f} ‚Üí ${current_price:.2f}\n\n"
        f"üé£ –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–º—É –∑–∞–±—Ä–æ—Å—É? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cast!"
    )


def format_enhanced_status_message(username, pond_name, pond_pair, rod_name, leverage, entry_price, current_pnl, time_fishing):
    """Format enhanced status command message with simple readable structure"""
    safe_username = escape_markdown(username) if username else "–†—ã–±–∞–∫"
    pnl_color = "üü¢" if current_pnl >= 0 else "üî¥"
    
    return (
        f"üé£ <b>–°—Ç–∞—Ç—É—Å —Ä—ã–±–∞–ª–∫–∏ {safe_username}:</b>\n\n"
        f"–£–¥–æ—á–∫–∞: <b>{rod_name}</b>\n"
        f"–í–æ–¥–æ–µ–º: <b>{pond_name}</b> ({pond_pair})\n"
        f"‚è± –í—Ä–µ–º—è —Ä—ã–±–∞–ª–∫–∏: <b>{time_fishing}</b>\n"
        f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: <b>${entry_price:.2f}</b>\n"
        f"{pnl_color} PnL: <b>{current_pnl:+.1f}%</b> (–ø–ª–µ—á–æ {leverage}x)\n\n"
        f"ü™ù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hook —á—Ç–æ–±—ã –≤—ã—Ç–∞—â–∏—Ç—å —É–ª–æ–≤!"
    )

def format_no_fishing_status(username, bait_tokens):
    """Format status when user is not fishing"""
    safe_username = escape_markdown(username) if username else "–†—ã–±–∞–∫"
    
    return (
        f"üé£ <b>–°—Ç–∞—Ç—É—Å —Ä—ã–±–∞–ª–∫–∏ {safe_username}:</b>\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å: <i>–ù–µ —Ä—ã–±–∞—á–∏—Ç</i>\n"
        f"ü™± –¢–æ–∫–µ–Ω—ã BAIT: <b>{bait_tokens}</b>\n\n"
        f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cast —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É!"
    )

def format_new_user_status(username):
    """Format status for new users"""
    safe_username = escape_markdown(username) if username else "–†—ã–±–∞–∫"
    
    return (
        f"üé£ <b>–°—Ç–∞—Ç—É—Å —Ä—ã–±–∞–ª–∫–∏ {safe_username}:</b>\n\n"
        f"üÜï –°—Ç–∞—Ç—É—Å: <b>–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫</b>\n"
        f"ü™± –¢–æ–∫–µ–Ω—ã BAIT: <b>10</b> (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å)\n\n"
        f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cast —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É!"
    )