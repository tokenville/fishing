"""
Message templates and text generators for the fishing bot.
Contains all static messages, dynamic text generation functions, and story templates.
"""

def escape_markdown(text):
    """Simply return text without escaping - we'll use plain text mode"""
    return text if text else ""

def get_cast_header(username, rod_name, pond_name, pond_pair, entry_price, leverage, user_level=1):
    """Fixed casting header with key information"""
    safe_username = username if username else "–†—ã–±–∞–∫"
    stake_amount = user_level * 1000
    
    return (
        f"üé£ <b>{safe_username}</b> –∑–∞–±—Ä–∞—Å—ã–≤–∞–µ—Ç —É–¥–æ—á–∫—É:\n\n"
        f"–£–¥–æ—á–∫–∞: {rod_name} (–ø–ª–µ—á–æ {leverage}x, —Å—Ç–∞–≤–∫–∞ ${stake_amount})\n"
        f"–í–æ–¥–æ–µ–º: {pond_name} ({pond_pair})\n"
        f"üìà –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: <b>${entry_price:.2f}</b>"
    )

def get_cast_animated_sequence():
    """Animated sequence for casting (only this part changes)"""
    return [
        "üí´ –í–∑–º–∞—Ö! –£–¥–æ—á–∫–∞ –ª–µ—Ç–∏—Ç —á–µ—Ä–µ–∑ –≤–æ–∑–¥—É—Ö!",
        "üí¶ –ü–õ–Æ–•! –ò–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ!",
        "ü™± –ù–∞–∂–∏–≤–∫–∞ –º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–≥—Ä—É–∂–∞–µ—Ç—Å—è...",
        "üêü –†—ã–±–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –Ω–∞–∂–∏–≤–∫–æ–π!",
        "‚ú® –ü–æ–¥—Å–µ–∫–∞–π —Å /hook, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤..."
    ]

def format_cast_message(header, animated_text):
    """Combine header and animated text for casting message"""
    return f"{header}\n\n{animated_text}"


        
def get_hook_header(username, rod_name, pond_name, pond_pair, time_fishing, entry_price, current_price, leverage, user_level=1):
    """Fixed hook header with key information"""
    safe_username = username if username else "–†—ã–±–∞–∫"
    stake_amount = user_level * 1000
    
    return (
        f"üé£ <b>{safe_username} –ü–û–î–°–ï–ö–ê–ï–¢!</b>\n\n"
        f"–£–¥–æ—á–∫–∞: {rod_name} (–ø–ª–µ—á–æ {leverage}x, —Å—Ç–∞–≤–∫–∞ ${stake_amount})\n"
        f"–í–æ–¥–æ–µ–º: {pond_name} ({pond_pair})\n"
        f"–í—Ä–µ–º—è —Ä—ã–±–∞–ª–∫–∏: <b>{time_fishing}</b>\n"
        f"–ü–æ–∑–∏—Ü–∏—è: ${entry_price:.2f} ‚Üí <b>${current_price:.2f}</b>"
    )

def get_hook_animated_sequence():
    """Animated sequence for hooking (only this part changes)"""
    return [
        "‚ö° –ü–æ–¥—Å–µ–∫–∞–µ–º! –ß—Ç–æ-—Ç–æ –Ω–∞ –∫—Ä—é—á–∫–µ!",
        "üé£ –ë–æ—Ä—å–±–∞ –Ω–∞—á–∞–ª–∞—Å—å! –¢—è–Ω–µ–º –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ...",
        "üåä –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ! –†—ã–±–∞ –Ω–µ —Ö–æ—á–µ—Ç —Å–¥–∞–≤–∞—Ç—å—Å—è!",
        "üí´ –ü–æ—á—Ç–∏ –≤—ã—Ç–∞—â–∏–ª–∏... –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É—Å–∏–ª–∏–µ!",
        "üêü –ß—Ç–æ-—Ç–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –∏–∑ –≥–ª—É–±–∏–Ω—ã!"
    ]

def format_hook_message(header, animated_text):
    """Combine header and animated text for hook message"""
    return f"{header}\n\n{animated_text}"

def get_hook_tension_message(pnl):
    """Get tension-building message before revealing catch"""
    if pnl > 20:
        return "üé£ –≠–ü–ò–ß–ï–°–ö–ê–Ø –ë–ò–¢–í–ê! –í—Å—è –ª–µ—Å–∫–∞ —Ç—Ä—è—Å–µ—Ç—Å—è! –≠—Ç–æ —á—Ç–æ-—Ç–æ –û–ì–†–û–ú–ù–û–ï! üåäüí•"
    elif pnl > 10:
        return "üê† –°–∏–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ! –≠—Ç–∞ —Ä—ã–±–∞ –±–æ—Ä–µ—Ç—Å—è! ‚ö°"
    elif pnl > 0:
        return "üêü –ß—Ç–æ-—Ç–æ –ø—Ä–∏–ª–∏—á–Ω–æ–µ –Ω–∞ –∫—Ä—é—á–∫–µ... –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø–æ–π–º–∞–ª–∏! ü§î"
    elif pnl > -10:
        return "üåä –û—â—É—â–∞–µ—Ç—Å—è –ª–µ–≥–∫–æ... –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –≤–æ–¥–æ—Ä–æ—Å–ª–∏? üòÖ"
    else:
        return "ü¶ê –û –Ω–µ—Ç... —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º—É—Å–æ—Ä... üò¨"

def get_catch_story_from_db(fish_data):
    """Get simple catch story from database fish data"""
    if not fish_data:
        return "üé£ –í—ã —á—Ç–æ-—Ç–æ –ø–æ–π–º–∞–ª–∏!"
    
    # Handle both dict-like objects (asyncpg Record) and tuples (sqlite)
    if hasattr(fish_data, 'get'):
        # asyncpg Record access
        fish_name = fish_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä—ã–±–∞')
        emoji = fish_data.get('emoji', 'üêü')
        description = fish_data.get('description', '')
    elif hasattr(fish_data, '__getitem__'):
        try:
            # Dictionary or tuple access
            fish_name = fish_data['name'] if 'name' in fish_data else fish_data[1]
            emoji = fish_data['emoji'] if 'emoji' in fish_data else fish_data[2]
            description = fish_data['description'] if 'description' in fish_data else (fish_data[3] if len(fish_data) > 3 else '')
        except (IndexError, KeyError, TypeError):
            fish_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä—ã–±–∞"
            emoji = "üêü"
            description = ""
    else:
        fish_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä—ã–±–∞"
        emoji = "üêü"
        description = ""
    
    return f"<b>{fish_name}</b>. {description}. {emoji}"


async def get_help_text():
    """Get dynamic help command text from database"""
    from src.database.db_manager import get_pool
    
    try:
        pool = await get_pool()
        async with pool.acquire() as conn:
            # Get fish statistics
            fish_data = await conn.fetch('''
                SELECT emoji, name, rarity, description, min_pnl, max_pnl, required_ponds, required_rods
                FROM fish 
                ORDER BY min_pnl DESC
            ''')
            
            # Get ponds count and info
            ponds_count = await conn.fetchval('SELECT COUNT(*) FROM ponds WHERE is_active = true')
            
            ponds_data = await conn.fetch('''
                SELECT name, trading_pair, required_level 
                FROM ponds 
                WHERE is_active = true 
                ORDER BY required_level
            ''')
            
            # Get rods count and leverage range
            rods_count = await conn.fetchval('SELECT COUNT(*) FROM rods')
            
            leverage_range = await conn.fetchrow('SELECT MIN(leverage), MAX(leverage) FROM rods')
            
            # Get starter bait amount (from user creation)
            starter_bait = await conn.fetchrow('SELECT bait_tokens FROM users WHERE bait_tokens = 10 LIMIT 1')
            starter_bait_amount = starter_bait['bait_tokens'] if starter_bait else 10
        
        # Build dynamic help text
        help_text = """üé£ <b>–ö–û–ú–ê–ù–î–´ –ë–û–¢–ê –†–´–ë–ê–õ–ö–ò:</b>

/cast - –ó–∞–∫–∏–Ω—É—Ç—å —É–¥–æ—á–∫—É (—Å—Ç–æ–∏–º–æ—Å—Ç—å: 1 ü™± BAIT)
/hook - –í—ã—Ç–∞—â–∏—Ç—å —É–ª–æ–≤ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø–æ–π–º–∞–ª–∏!
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä—ã–±–∞–ª–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>üéÆ –ö–ê–ö –ò–ì–†–ê–¢–¨:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cast —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É
2. –ñ–¥–∏—Ç–µ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–±—Ä–æ—Å–∞
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hook –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
5. –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É —Ä—ã–±—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!

<b>üêü –¢–ò–ü–´ –†–´–ë:</b>"""
        
        # Group fish by rarity
        rarity_groups = {
            'trash': [],
            'common': [],
            'rare': [],
            'epic': [], 
            'legendary': []
        }
        
        special_fish = []
        
        for fish in fish_data:
            emoji = fish['emoji']
            name = fish['name']
            rarity = fish['rarity']
            min_pnl = fish['min_pnl']
            max_pnl = fish['max_pnl']
            required_ponds = fish['required_ponds']
            required_rods = fish['required_rods']
            
            # Check if it's a special fish (has requirements)
            if required_ponds or required_rods:
                special_fish.append(fish)
            else:
                # Regular fish grouped by rarity
                if rarity in rarity_groups:
                    rarity_groups[rarity].append(fish)
        
        # Add regular fish by rarity
        rarity_names = {
            'trash': '–ú—É—Å–æ—Ä',
            'common': '–û–±—ã—á–Ω–∞—è', 
            'rare': '–†–µ–¥–∫–∞—è',
            'epic': '–≠–ø–∏—á–µ—Å–∫–∞—è',
            'legendary': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è'
        }
        
        for rarity in ['legendary', 'epic', 'rare', 'common', 'trash']:
            for fish in rarity_groups[rarity]:
                emoji = fish['emoji']
                name = fish['name']
                min_pnl = fish['min_pnl']
                max_pnl = fish['max_pnl']
                pnl_desc = f"({min_pnl:+.0f}% to {max_pnl:+.0f}%)" if min_pnl != max_pnl else f"({min_pnl:+.0f}%)"
                help_text += f"\n{emoji} {name} {pnl_desc} - {rarity_names[rarity]}"
        
        # Add special fish section if any exist
        if special_fish:
            help_text += "\n\n<b>üåü –û–°–û–ë–´–ï –†–´–ë–´:</b>"
            for fish in special_fish:
                emoji = fish['emoji']
                name = fish['name']
                required_ponds = fish['required_ponds']
                required_rods = fish['required_rods']
                
                # Build requirement description
                requirements = []
                if required_ponds:
                    # Get pond names for requirements
                    pond_ids = required_ponds.split(',')
                    pond_names = []
                    for i, pond_data in enumerate(ponds_data):
                        if str(i + 1) in pond_ids:
                            pond_names.append(pond_data['name'])
                    if pond_names:
                        requirements.append(f"—Ç–æ–ª—å–∫–æ {'/'.join(pond_names)}")
                
                if required_rods:
                    requirements.append("—Ç–æ–ø–æ–≤—ã–µ —É–¥–æ—á–∫–∏")
                
                req_text = ", ".join(requirements) if requirements else "–æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è"
                help_text += f"\n{emoji} {name} - {req_text}"
        
        # Add dynamic system info
        help_text += f"\n\n<b>‚öôÔ∏è –°–ò–°–¢–ï–ú–ê:</b>"
        help_text += f"\n‚Ä¢ {rods_count} —Ç–∏–ø–æ–≤ —É–¥–æ—á–µ–∫ —Å –ø–ª–µ—á–æ–º {leverage_range['min']}x –¥–æ {leverage_range['max']}x"
        help_text += f"\n‚Ä¢ {ponds_count} —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–¥–æ–µ–º–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä–∞–º–∏:"
        
        for pond in ponds_data[:4]:  # Show first 4 ponds
            help_text += f"\n  ‚îî {pond['name']} ({pond['trading_pair']}) - —É—Ä–æ–≤–µ–Ω—å {pond['required_level']}+"
        
        if ponds_count > 4:
            help_text += f"\n  ‚îî ... –∏ –µ—â–µ {ponds_count - 4}"
            
        help_text += f"\n‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π"
        help_text += f"\n‚Ä¢ –ù–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç {starter_bait_amount} ü™± BAIT —Ç–æ–∫–µ–Ω–æ–≤"
        help_text += f"\n‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∏ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö!"
        
        return help_text
        
    except Exception:
        # Fallback to static text if database fails
        return """üé£ <b>–ö–û–ú–ê–ù–î–´ –ë–û–¢–ê –†–´–ë–ê–õ–ö–ò:</b>

/cast - –ó–∞–∫–∏–Ω—É—Ç—å —É–¥–æ—á–∫—É (—Å—Ç–æ–∏–º–æ—Å—Ç—å: 1 ü™± BAIT)
/hook - –í—ã—Ç–∞—â–∏—Ç—å —É–ª–æ–≤ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø–æ–π–º–∞–ª–∏!
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä—ã–±–∞–ª–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

<i>‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä—ã–±–∞–ª–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</i>
üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /cast —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"""


def format_fishing_complete_caption(username, catch_story, rod_name, leverage, pond_name, pond_pair, time_fishing, entry_price, current_price, pnl_percent, user_level=1):
    """Format fishing complete photo caption with new structured format"""
    safe_username = username if username else "–†—ã–±–∞–∫"
    pnl_color = "üü¢" if pnl_percent >= 0 else "üî¥"
    
    # Calculate dollar P&L based on user level
    from src.utils.crypto_price import calculate_dollar_pnl
    stake_amount = user_level * 1000
    dollar_pnl = calculate_dollar_pnl(entry_price, current_price, leverage, stake_amount)
    
    # Format PnL with dynamic precision
    if abs(pnl_percent) < 0.01:
        pnl_str = f"{pnl_percent:+.4f}%"
    elif abs(pnl_percent) < 0.1:
        pnl_str = f"{pnl_percent:+.3f}%"
    elif abs(pnl_percent) < 1:
        pnl_str = f"{pnl_percent:+.2f}%"
    else:
        pnl_str = f"{pnl_percent:+.1f}%"
    
    # Format dollar amount with proper sign placement
    if abs(dollar_pnl) < 0.01:
        dollar_str = f"${abs(dollar_pnl):.4f}" if dollar_pnl < 0 else f"${dollar_pnl:.4f}"
        dollar_str = f"-{dollar_str}" if dollar_pnl < 0 else f"+{dollar_str}"
    elif abs(dollar_pnl) < 1:
        dollar_str = f"${abs(dollar_pnl):.2f}" if dollar_pnl < 0 else f"${dollar_pnl:.2f}"
        dollar_str = f"-{dollar_str}" if dollar_pnl < 0 else f"+{dollar_str}"
    else:
        dollar_str = f"${abs(dollar_pnl):.0f}" if dollar_pnl < 0 else f"${dollar_pnl:.0f}"
        dollar_str = f"-{dollar_str}" if dollar_pnl < 0 else f"+{dollar_str}"
    
    return (
        f"–≠—Ç–æ {catch_story}\n\n"
        f"–£–¥–æ—á–∫–∞: {rod_name} (–ø–ª–µ—á–æ {leverage}x, —Å—Ç–∞–≤–∫–∞ ${stake_amount})\n"
        f"–í–æ–¥–æ–µ–º: {pond_name} ({pond_pair})\n"
        f"–í—Ä–µ–º—è —Ä—ã–±–∞–ª–∫–∏: <b>{time_fishing}</b>\n"
        f"–ü–æ–∑–∏—Ü–∏—è: ${entry_price:.2f} ‚Üí ${current_price:.2f}\n"
        f"PnL: <b>{pnl_str} ({dollar_str})</b>\n\n"
        f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cast —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É!"
    )


def format_enhanced_status_message(username, pond_name, pond_pair, rod_name, leverage, entry_price, current_price, current_pnl, time_fishing, user_level=1):
    """Format enhanced status command message with precise PnL and dollar amounts"""
    safe_username = escape_markdown(username) if username else "–†—ã–±–∞–∫"
    pnl_color = "üü¢" if current_pnl >= 0 else "üî¥"
    
    # Calculate dollar P&L based on user level
    from src.utils.crypto_price import calculate_dollar_pnl
    stake_amount = user_level * 1000
    dollar_pnl = calculate_dollar_pnl(entry_price, current_price, leverage, stake_amount)
    
    # Format PnL with dynamic precision (more decimal places for small changes)
    if abs(current_pnl) < 0.01:
        pnl_str = f"{current_pnl:+.4f}%"
    elif abs(current_pnl) < 0.1:
        pnl_str = f"{current_pnl:+.3f}%"
    elif abs(current_pnl) < 1:
        pnl_str = f"{current_pnl:+.2f}%"
    else:
        pnl_str = f"{current_pnl:+.1f}%"
    
    # Format dollar amount with proper sign placement
    if abs(dollar_pnl) < 0.01:
        dollar_str = f"${abs(dollar_pnl):.4f}" if dollar_pnl < 0 else f"${dollar_pnl:.4f}"
        dollar_str = f"-{dollar_str}" if dollar_pnl < 0 else f"+{dollar_str}"
    elif abs(dollar_pnl) < 1:
        dollar_str = f"${abs(dollar_pnl):.2f}" if dollar_pnl < 0 else f"${dollar_pnl:.2f}"
        dollar_str = f"-{dollar_str}" if dollar_pnl < 0 else f"+{dollar_str}"
    else:
        dollar_str = f"${abs(dollar_pnl):.0f}" if dollar_pnl < 0 else f"${dollar_pnl:.0f}"
        dollar_str = f"-{dollar_str}" if dollar_pnl < 0 else f"+{dollar_str}"
    
    return (
        f"üé£ <b>–°—Ç–∞—Ç—É—Å —Ä—ã–±–∞–ª–∫–∏ {safe_username}:</b>\n\n"
        f"–£–¥–æ—á–∫–∞: {rod_name} (–ø–ª–µ—á–æ {leverage}x, —Å—Ç–∞–≤–∫–∞ ${stake_amount})\n"
        f"–í–æ–¥–æ–µ–º: {pond_name} ({pond_pair})\n"
        f"‚è± –í—Ä–µ–º—è —Ä—ã–±–∞–ª–∫–∏: <b>{time_fishing}</b>\n"
        f"üìà –ü–æ–∑–∏—Ü–∏—è: ${entry_price:.2f} ‚Üí <b>${current_price:.2f}</b>\n"
        f"{pnl_color} PnL: <b>{pnl_str} ({dollar_str})</b>\n\n"
        f"ü™ù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hook —á—Ç–æ–±—ã –≤—ã—Ç–∞—â–∏—Ç—å —É–ª–æ–≤!"
    )

def format_no_fishing_status(username, bait_tokens, user_stats=None):
    """Format status when user is not fishing with rich statistics"""
    safe_username = escape_markdown(username) if username else "–†—ã–±–∞–∫"
    
    base_info = (
        f"üé£ <b>–°—Ç–∞—Ç—É—Å —Ä—ã–±–∞–ª–∫–∏ {safe_username}:</b>\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å: <i>–ù–µ —Ä—ã–±–∞—á–∏—Ç</i>\n"
        f"ü™± –¢–æ–∫–µ–Ω—ã BAIT: <b>{bait_tokens}</b>\n"
    )
    
    # Add user statistics if available
    if user_stats:
        stats_text = ""
        
        # Add user level and experience
        if 'user' in user_stats and user_stats['user']:
            level = user_stats['user'][2] if len(user_stats['user']) > 2 else 1
            experience = user_stats['user'][3] if len(user_stats['user']) > 3 else 0
            stats_text += f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: <b>{level}</b> (–æ–ø—ã—Ç: {experience})\n"
        
        # Add fishing statistics
        if 'fishing' in user_stats and user_stats['fishing']:
            completed = user_stats['fishing'][1] or 0
            avg_pnl = user_stats['fishing'][2]
            best_pnl = user_stats['fishing'][3]
            worst_pnl = user_stats['fishing'][4]
            
            if completed > 0:
                stats_text += f"\n<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–±–∞–ª–∫–∏:</b>\n"
                stats_text += f"üé£ –í—Å–µ–≥–æ —Ä—ã–±–∞–ª–æ–∫: <b>{completed}</b>\n"
                
                if avg_pnl is not None:
                    stats_text += f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{avg_pnl:+.2f}%</b>\n"
                if best_pnl is not None:
                    stats_text += f"üèÜ –õ—É—á—à–∏–π —É–ª–æ–≤: <b>{best_pnl:+.1f}%</b>\n"
                if worst_pnl is not None:
                    stats_text += f"üíî –•—É–¥—à–∏–π —É–ª–æ–≤: <b>{worst_pnl:+.1f}%</b>\n"
        
        # Add fish collection
        if 'fish_collection' in user_stats and user_stats['fish_collection']:
            collection = user_stats['fish_collection']
            total_fish = sum(fish[3] for fish in collection)
            unique_fish = len(collection)
            
            if total_fish > 0:
                stats_text += f"\n<b>üêü –ö–æ–ª–ª–µ–∫—Ü–∏—è —Ä—ã–±:</b>\n"
                stats_text += f"üéØ –í—Å–µ–≥–æ –ø–æ–π–º–∞–Ω–æ: <b>{total_fish}</b> —Ä—ã–±\n"
                stats_text += f"üåà –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤: <b>{unique_fish}</b>\n"
                
                # Show top 3 most caught fish
                if len(collection) > 0:
                    stats_text += f"\n<b>–¢–æ–ø-3 —É–ª–æ–≤–∞:</b>\n"
                    for i, fish in enumerate(collection[:3], 1):
                        fish_name, emoji, rarity, count = fish
                        rarity_emoji = {"trash": "üóë", "common": "‚ö™", "rare": "üîµ", 
                                      "epic": "üü£", "legendary": "üü°"}.get(rarity, "‚ö´")
                        stats_text += f"{i}. {emoji} {fish_name} {rarity_emoji} √ó {count}\n"
        
        # Add rod collection
        if 'rods' in user_stats and user_stats['rods']:
            rods = user_stats['rods']
            stats_text += f"\n<b>üé£ –£–¥–æ—á–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ:</b> {len(rods)}\n"
            best_rod = max(rods, key=lambda x: x[1]) if rods else None
            if best_rod:
                stats_text += f"üí™ –õ—É—á—à–∞—è —É–¥–æ—á–∫–∞: <b>{best_rod[0]}</b> ({best_rod[1]}x)\n"
        
        return base_info + stats_text + "\nüöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cast —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É!"
    
    return base_info + "\nüöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cast —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É!"

def format_new_user_status(username):
    """Format status for new users"""
    safe_username = escape_markdown(username) if username else "–†—ã–±–∞–∫"
    
    return (
        f"üé£ <b>–°—Ç–∞—Ç—É—Å —Ä—ã–±–∞–ª–∫–∏ {safe_username}:</b>\n\n"
        f"üÜï –°—Ç–∞—Ç—É—Å: <b>–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫</b>\n"
        f"ü™± –¢–æ–∫–µ–Ω—ã BAIT: <b>10</b> (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å)\n\n"
        f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cast —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É!"
    )